generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id              String      @id @default(cuid())
    email           String      @unique
    password        String?
    name            String
    role            Role        @default(ASPIRANT)
    followedMentors Mentor[]
    insights        Insight[]
    challenges      Challenge[]
    checkins        Checkin[]
    bookmarks       Bookmark[]
    likes           Like[]
    studyGroups StudyGroup[]  
    dailyTasks  DailyTask[]  


    emailVerified   DateTime?
    image           String?
    accounts        Account[]
    sessions        Session[]
    Aspirant        Aspirant[]
    ChallengeParticipation ChallengeParticipation[]

    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    @@index([email])
}

model Mentor {
    id          String   @id @default(cuid())
    user        User     @relation(fields: [userId], references: [id])
    userId      String
    mainWork    String
    description String
    introVideo  String?
    hashtags    Hashtag[] @relation("MentorHashtags")
    insights    Insight[]
    challenges  Challenge[]
    stories     Story[]
    BookRecommendation BookRecommendation[]

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@index([userId])
}

model Aspirant {
    id                  String                   @id @default(cuid())
    user                User                     @relation(fields: [userId], references: [id])
    userId              String
    preparation         String[]
    completedChallenges ChallengeParticipation[]

    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt
}

model Hashtag {
    id      String   @id @default(cuid())
    name    String   @unique
    mentors Mentor[] @relation("MentorHashtags")
}

model Insight {
    id        String     @id @default(cuid())
    content   String
    createdAt DateTime   @default(now())
    mentor    Mentor     @relation(fields: [mentorId], references: [id])
    mentorId  String
    bookmarks Bookmark[]
    likes     Like[]
    user      User?      @relation(fields: [userId], references: [id])
    userId    String?

    @@index([mentorId])
    @@index([userId])
}

model BookRecommendation {
  id          String   @id @default(cuid())
  title       String
  author      String
  genre       String
  description String
  
  mentor      Mentor   @relation(fields: [mentorId], references: [id])
  mentorId    String
  createdAt   DateTime @default(now())

  @@index([mentorId])
}

model Bookmark {
    id        String  @id @default(cuid())
    user      User    @relation(fields: [userId], references: [id])
    userId    String
    insight   Insight @relation(fields: [insightId], references: [id])
    insightId String

    createdAt DateTime @default(now())
}

model Like {
    id        String   @id @default(cuid())
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    insight   Insight  @relation(fields: [insightId], references: [id])
    insightId String
    createdAt DateTime @default(now())

    @@index([userId])
    @@index([insightId])
}

model Challenge {
    id           String                   @id @default(cuid())
    title        String
    description  String
    mentor       Mentor                   @relation(fields: [mentorId], references: [id])
    mentorId     String
    durationDays Int
    participants ChallengeParticipation[]
    user         User?                    @relation(fields: [userId], references: [id])
    userId       String?

    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    @@index([mentorId])
    @@index([userId])
}

model ChallengeParticipation {
    id              String     @id @default(cuid())
    user            User       @relation(fields: [userId], references: [id])
    userId          String
    challenge       Challenge  @relation(fields: [challengeId], references: [id])
    challengeId     String
    startDate       DateTime
    quitDate        DateTime?
    checkins        Checkin[]
    maxStreak       Int        @default(0)
    isSuccess       Boolean    @default(false)
    aspirant        Aspirant?  @relation(fields: [aspirantId], references: [id])
    aspirantId      String?

    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    @@unique([userId, challengeId])
    @@index([aspirantId])
}

model Checkin {
    id              String                 @id @default(cuid())
    participation   ChallengeParticipation @relation(fields: [participationId], references: [id])
    participationId String
    checkinDate     DateTime
    user            User?                  @relation(fields: [userId], references: [id])
    userId          String?

    createdAt       DateTime @default(now())
}
model StudyGroup {
  id          String      @id @default(cuid())
  title       String
  description String
  createdBy   User        @relation(fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime    @default(now())
  dailyTasks  DailyTask[] // Tasks related to this study group
}

model DailyTask {
  id          String     @id @default(cuid())
  taskTitle   String
  description String
  datePosted  DateTime   @default(now())
  groupId     String
  group       StudyGroup @relation(fields: [groupId], references: [id])
  postedBy    User       @relation(fields: [postedById], references: [id])
  postedById  String
}

model Story {
    id        String   @id @default(cuid())
    title     String
    content   String
    mentor    Mentor   @relation(fields: [mentorId], references: [id])
    mentorId  String
    createdAt DateTime @default(now())

    @@index([mentorId])
}

enum Role {
    MENTOR
    ASPIRANT
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
